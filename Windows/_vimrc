" Through this file existing, defaults.vim doesn't get run. This fixes that by forcibly running it before we do our custom stuff.
runtime defaults.vim

" Fixes some stuff to do with deleting. Makes sure specific delete commands don't automatically yank.
nnoremap dd "_dd

nnoremap dw "_dw
nnoremap dW "_dW

nnoremap db "_db
nnoremap dB "_dB

nnoremap x "_x

" Mappings for moving text around easily.
nnoremap <S-Up> :m-2<CR>
nnoremap <S-Down> :m+<CR>
inoremap <S-Up> <Esc>:m-2<CR>
inoremap <S-Down> <Esc>:m+<CR>
vnoremap <S-Up> :m'<-2<CR>gv
vnoremap <S-Down> :m'>+1<CR>gv

" Fixes yanking and putting so that they use the system clipboard instead of default vim register.
set clipboard=unnamed

" Makes it so that the newline character at the end of a line is not accidentally selected while using cursor in visual mode.
behave mswin
set selectmode=""		" The above command sets a couple of things that make it more windows compatible I guess. We don't want this thing though, so we set it back here.

" Prevents vim from wrapping comments and placing comment character on new line.
" The if statement is like an include guard in C, it prevents redefinition if this file is run multiple times by another file.
" autocmd means that set will run when vim finishes setting up and enters interactive mode (VimEnter) for every file-type that I try to open (*).
if !exists("autocommands_loaded")
	autocmd VimEnter * set formatoptions-=cro
	let autocommands_loaded = 1
endif

" Prevents accessing directories with vim, because it's annoying when it accidentally happens and who would ever even want to.
for f in argv()
	if isdirectory(f)
		echomsg "vimrc: directory access disabled, cannot access " . f
		quit
	endif
endfor

" TODO: Make a unified vimrc file that changes based on platform you run it on. Also add scrolling abilities to the windows behaviour.

